<import component="page-container" from="hop/ui">

<inspector-view {preview}>
	<div class="flex flex-col gap-1 relative group p-4" data-id="resizable-container">
		<div class="flex justify-between items-center">
			<div data-id="title-area">
				<slot-title />
			</div>
			<button data-id="bg-toggler" class="bg-white border border-2 size-4"></button>
		</div>
		<div class="bg-white" data-id="iframe-wrapper">
			<iframe set-src="preview" style="width: 100%; height: 480px; border: none;" title="Component Preview"></iframe>
		</div>
		<!-- Resize handles -->
		<div data-id="resize-handle-se" class="absolute bottom-0 right-0 w-4 h-4 bg-gray-500 border border-white cursor-se-resize opacity-0 group-hover:opacity-70 hover:!opacity-100 rounded-sm transition-opacity duration-200"></div>
		<div data-id="resize-handle-s" class="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-8 h-3 bg-gray-500 border border-white cursor-s-resize opacity-0 group-hover:opacity-70 hover:!opacity-100 rounded-sm transition-opacity duration-200"></div>
		<div data-id="resize-handle-e" class="absolute right-0 top-1/2 transform -translate-y-1/2 w-3 h-8 bg-gray-500 border border-white cursor-e-resize opacity-0 group-hover:opacity-70 hover:!opacity-100 rounded-sm transition-opacity duration-200"></div>
	</div>
	<script>
		const wrapper = frameElement.querySelector('[data-id="iframe-wrapper"]');
		const bgToggler = frameElement.querySelector('[data-id="bg-toggler"]');
		const titleArea = frameElement.querySelector('[data-id="title-area"]');
		const iframe = frameElement.querySelector('iframe');
		const container = frameElement.querySelector('[data-id="resizable-container"]');
		const resizeHandleSE = frameElement.querySelector('[data-id="resize-handle-se"]');
		const resizeHandleS = frameElement.querySelector('[data-id="resize-handle-s"]');
		const resizeHandleE = frameElement.querySelector('[data-id="resize-handle-e"]');
		
		// Background toggle functionality
		bgToggler.addEventListener('click', () => {
			bgToggler.classList.toggle('bg-white');
			bgToggler.classList.toggle('bg-transparent');
			wrapper.classList.toggle('bg-white');
			wrapper.classList.toggle('bg-transparent');
			wrapper.classList.toggle('outline');
		});
		
		// Draggable functionality
		titleArea.style.cursor = 'move';
		let isDragging = false;
		let startX, startY;
		
		titleArea.addEventListener('mousedown', (e) => {
			isDragging = true;
			const rect = frameElement.getBoundingClientRect();
			startX = e.clientX - rect.left;
			startY = e.clientY - rect.top;
			
			// Preserve the width before making it absolute
			frameElement.style.width = rect.width + 'px';
			frameElement.style.height = rect.height + 'px';
			frameElement.style.position = 'absolute';
			frameElement.style.opacity = '0.5';
			
			// Disable pointer events on iframe to prevent drag interference
			document.querySelectorAll('iframe').forEach((frm) => {
				frm.style.pointerEvents = 'none';
			})
			
			e.preventDefault();
		});
		
		document.addEventListener('mousemove', (e) => {
			if (isDragging) {
				frameElement.style.left = (e.clientX + window.scrollX - startX) + 'px';
				frameElement.style.top = (e.clientY + window.scrollY - startY) + 'px';
			}
		});
		
		document.addEventListener('mouseup', () => {
			if (isDragging) {
				isDragging = false;
				frameElement.style.opacity = '1';
				
				// Re-enable pointer events on iframe
				document.querySelectorAll('iframe').forEach((frm) => {
					frm.style.pointerEvents = 'auto';
				});
				
				updateViewportExpander();
				saveElementState();
			}
		});
		
		// Resize functionality
		let isResizing = false;
		let resizeType = '';
		let resizeStartX, resizeStartY, startWidth, startHeight;
		
		function initResize(e, type) {
			isResizing = true;
			resizeType = type;
			resizeStartX = e.clientX;
			resizeStartY = e.clientY;
			const rect = frameElement.getBoundingClientRect();
			startWidth = rect.width;
			startHeight = rect.height;
			
			// Disable pointer events on iframe during resize
			document.querySelectorAll('iframe').forEach((frm) => {
				frm.style.pointerEvents = 'none';
			});
			
			e.preventDefault();
			e.stopPropagation();
		}
		
		resizeHandleSE.addEventListener('mousedown', (e) => initResize(e, 'se'));
		resizeHandleS.addEventListener('mousedown', (e) => initResize(e, 's'));
		resizeHandleE.addEventListener('mousedown', (e) => initResize(e, 'e'));
		
		document.addEventListener('mousemove', (e) => {
			if (isResizing) {
				const deltaX = e.clientX - resizeStartX;
				const deltaY = e.clientY - resizeStartY;
				
				if (resizeType.includes('e')) {
					const newWidth = Math.max(200, startWidth + deltaX);
					frameElement.style.width = newWidth + 'px';
				}
				
				if (resizeType.includes('s')) {
					const newHeight = Math.max(150, startHeight + deltaY);
					frameElement.style.height = newHeight + 'px';
					iframe.style.height = (newHeight - 60) + 'px'; // Adjust for header
				}
			}
		});
		
		document.addEventListener('mouseup', () => {
			if (isResizing) {
				isResizing = false;
				resizeType = '';
				
				// Re-enable pointer events on iframe
				document.querySelectorAll('iframe').forEach((frm) => {
					frm.style.pointerEvents = 'auto';
				});
				
				updateViewportExpander();
				saveElementState();
			}
		});
		
		function updateViewportExpander() {
			const rect = frameElement.getBoundingClientRect();
			const elementRight = rect.left + rect.width;
			const elementBottom = rect.top + rect.height;
			
			const expander = document.getElementById('viewport-expander');
			const currentWidth = parseInt(expander.style.width) || 3000;
			const currentHeight = parseInt(expander.style.height) || 3000;
			
			const newWidth = Math.max(3000, currentWidth, elementRight + 50);
			const newHeight = Math.max(3000, currentHeight, elementBottom + 50);
			
			expander.style.width = newWidth + 'px';
			expander.style.height = newHeight + 'px';
		}
		
		// localStorage functionality
		function getElementId() {
			const titleElement = frameElement.querySelector('[data-id="title-area"]');
			return titleElement ? titleElement.textContent.trim() : 'unknown-' + Math.random().toString(36).substr(2, 9);
		}
		
		function saveElementState() {
			const elementId = getElementId();
			const rect = frameElement.getBoundingClientRect();
			const state = {
				position: frameElement.style.position,
				left: frameElement.style.left,
				top: frameElement.style.top,
				width: frameElement.style.width,
				height: frameElement.style.height,
				iframeHeight: iframe.style.height
			};
			
			const savedStates = JSON.parse(localStorage.getItem('hop-inspector-states') || '{}');
			savedStates[elementId] = state;
			localStorage.setItem('hop-inspector-states', JSON.stringify(savedStates));
		}
		
		function restoreElementState() {
			const elementId = getElementId();
			const savedStates = JSON.parse(localStorage.getItem('hop-inspector-states') || '{}');
			const state = savedStates[elementId];
			
			if (state) {
				if (state.position) frameElement.style.position = state.position;
				if (state.left) frameElement.style.left = state.left;
				if (state.top) frameElement.style.top = state.top;
				if (state.width) frameElement.style.width = state.width;
				if (state.height) frameElement.style.height = state.height;
				if (state.iframeHeight) iframe.style.height = state.iframeHeight;
				
				// Update viewport expander to accommodate restored position
				setTimeout(updateViewportExpander, 100);
			}
		}
		
		// Initialize: restore state on load
		restoreElementState();
	</script>
	<hop-x-preview>
		<div class="p-8">
			<inspector-view {'/_preview/hop%2Ferror_pages/error-generic-error'}>
				<with-title>hop/ui - component</with-title>
			</inspector-view>
		</div>
	</hop-x-preview>
</inspector-view>

<!---------------------------------------------------------------------------->

<inspect-page {data} entrypoint>
	<!DOCTYPE html>
	<html>
	<head>
		<title>hop dev - inspector</title>
		<script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>
		<link href="https://fonts.googleapis.com/css2?family=JetBrains+Mono:ital,wght@0,100..800;1,100..800&display=swap" rel="stylesheet">
        <style>
          body { font-family: "JetBrains Mono"; }
        </style>
	</head>
	<body class="bg-[#f6f6f6] mb-40" style="background: repeating-conic-gradient(rgba(0,0,0,0.025) 0 25%, rgba(0,0,0,0.05) 0 50%) 50% / 16px 16px;">
		<div id="viewport-expander" style="position: absolute; top: 0; left: 0; width: 3000px; height: 3000px; pointer-events: none; z-index: -1;"></div>
		<page-container>
			<for {module in data.modules}>
				<for {component in module.components}>
					<inspector-view {component.preview_url}>
						<with-title>{module.name} - {component.name}</with-title>
					</inspector-view>
				</for>
			</for>
		</page-container>
	</body>
	</html>
</inspect-page>
