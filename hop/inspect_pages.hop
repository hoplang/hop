<import component="side-bar" from="hop/ui">
<import component="side-bar-group" from="hop/ui">

<canvas-view class="w-full h-full">
	<div data-id="canvas" style="width: 0; height: 0;">
		<slot-default />
	</div>
	
	<script>
		// Zoom state management - make globally accessible
		window.hopInspectorZoom = 1.0;
		let currentZoom = 1.0;
		const minZoom = 0.1;
		const maxZoom = 5.0;
		
		// Canvas transformation matrix
		let transformMatrix = new DOMMatrix();
		
		// Canvas panning state
		let isPanning = false;
		let spacePressed = false;
		let panStartX = 0;
		let panStartY = 0;
		let panStartMatrix = null;
		
		const canvas = frameElement.querySelector('[data-id="canvas"]');
		
		function applyTransform() {
			canvas.style.transform = transformMatrix.toString();
		}
		
		function setZoom(newZoom, centerX = 0, centerY = 0) {
			const oldZoom = currentZoom;
			currentZoom = Math.max(minZoom, Math.min(maxZoom, newZoom));
			window.hopInspectorZoom = currentZoom;
			
			// Calculate the scale factor
			const scaleFactor = currentZoom / oldZoom;
			
			// Create a matrix that scales around the center point
			const scaleMatrix = new DOMMatrix()
				.translate(centerX, centerY)
				.scale(scaleFactor)
				.translate(-centerX, -centerY);
			
			transformMatrix = transformMatrix.multiply(scaleMatrix);
			
			applyTransform();
		}
		
		function setCanvasPosition(deltaX, deltaY) {
			// Apply translation to the current matrix
			const translateMatrix = new DOMMatrix().translate(deltaX, deltaY);
			transformMatrix = transformMatrix.multiply(translateMatrix);
			applyTransform();
			
			// Save canvas position to localStorage
			localStorage.setItem('hop-inspector-transform-matrix', transformMatrix.toString());
		}
		
		function setAbsoluteCanvasPosition(x, y) {
			// Reset translation components while preserving scale
			const scale = currentZoom;
			transformMatrix = new DOMMatrix().translate(x, y).scale(scale);
			applyTransform();
			
			// Save canvas position to localStorage
			localStorage.setItem('hop-inspector-transform-matrix', transformMatrix.toString());
		}
		
		// Scroll wheel zoom and pan
		frameElement.addEventListener('wheel', (e) => {
			if (e.ctrlKey) {
				// Zoom with Ctrl+scroll
				e.preventDefault();
				
				// Use a multiplicative zoom for smoother experience
				const zoomFactor = e.deltaY > 0 ? 0.85 : 1.15;
				const newZoom = currentZoom * zoomFactor;
				
				// Get mouse position relative to the frameElement (canvas-view wrapper)
				const frameRect = frameElement.getBoundingClientRect();
				const mouseX = e.clientX - frameRect.left;
				const mouseY = e.clientY - frameRect.top;
				
				setZoom(newZoom, mouseX, mouseY);
			} else {
				// Pan with regular scroll
				e.preventDefault();
				const panSpeed = 0.7;
				
				if (e.shiftKey) {
					// Horizontal panning with Shift+scroll
					const deltaX = -e.deltaY * panSpeed; // Use deltaY for horizontal movement
					setCanvasPosition(deltaX, 0);
				} else {
					// Regular panning
					const deltaX = -e.deltaX * panSpeed;
					const deltaY = -e.deltaY * panSpeed;
					setCanvasPosition(deltaX, deltaY);
				}
			}
		}, { passive: false });
		
		// Space key panning functionality
		document.addEventListener('keydown', (e) => {
			if (e.code === 'Space' && !spacePressed && !e.target.matches('input, textarea, [contenteditable]')) {
				e.preventDefault();
				spacePressed = true;
				document.body.style.setProperty('cursor', 'grab', 'important');
			}
		});
		
		document.addEventListener('keyup', (e) => {
			if (e.code === 'Space') {
				spacePressed = false;
				isPanning = false;
				document.body.style.removeProperty('cursor');
			}
		});
		
		document.addEventListener('mousedown', (e) => {
			if (spacePressed && e.button === 0) {
				e.preventDefault();
				isPanning = true;
				panStartX = e.clientX;
				panStartY = e.clientY;
				panStartMatrix = new DOMMatrix(transformMatrix);
				document.body.style.setProperty('cursor', 'grabbing', 'important');
			}
		});
		
		document.addEventListener('mousemove', (e) => {
			if (isPanning && spacePressed) {
				const deltaX = e.clientX - panStartX;
				const deltaY = e.clientY - panStartY;
				
				// Apply translation to the starting matrix
				const translateMatrix = new DOMMatrix().translate(deltaX, deltaY);
				transformMatrix = panStartMatrix.multiply(translateMatrix);
				applyTransform();
			}
		});
		
		document.addEventListener('mouseup', (e) => {
			if (isPanning) {
				isPanning = false;
				if (spacePressed) {
					document.body.style.setProperty('cursor', 'grab', 'important');
				} else {
					document.body.style.removeProperty('cursor');
				}
				
				// Save final position
				localStorage.setItem('hop-inspector-transform-matrix', transformMatrix.toString());
			}
		});
		
		// Handle window blur to reset space key state
		window.addEventListener('blur', () => {
			spacePressed = false;
			isPanning = false;
			document.body.style.removeProperty('cursor');
		});
		
		// Restore transform matrix from localStorage
		const savedMatrix = localStorage.getItem('hop-inspector-transform-matrix');
		if (savedMatrix) {
			try {
				transformMatrix = new DOMMatrix(savedMatrix);
				// Extract current zoom from the matrix
				currentZoom = Math.sqrt(transformMatrix.a * transformMatrix.a + transformMatrix.b * transformMatrix.b);
				window.hopInspectorZoom = currentZoom;
			} catch (e) {
				// If parsing fails, use default matrix
				transformMatrix = new DOMMatrix();
			}
		}
		
		window.hopInspectorZoom = currentZoom;
		applyTransform();
		
		// Utility functions for external access
		window.canvasViewUtils = {
			getTransformMatrix: () => new DOMMatrix(transformMatrix),
			setTransformMatrix: (matrix) => {
				transformMatrix = new DOMMatrix(matrix);
				currentZoom = Math.sqrt(transformMatrix.a * transformMatrix.a + transformMatrix.b * transformMatrix.b);
				window.hopInspectorZoom = currentZoom;
				applyTransform();
			},
			resetTransform: () => {
				transformMatrix = new DOMMatrix();
				currentZoom = 1.0;
				window.hopInspectorZoom = currentZoom;
				applyTransform();
			}
		};
	</script>
</canvas-view>

<!---------------------------------------------------------------------------->

<inspector-view {preview} style="position: absolute;">
	<div class="flex flex-col gap-1 relative group p-4" data-id="resizable-container">
		<div class="flex justify-between items-center">
			<div data-id="title-area">
				<slot-title />
			</div>
			<button data-id="bg-toggler" class="bg-white border border-2 size-4"></button>
		</div>
		<div class="bg-white" data-id="iframe-wrapper">
			<iframe set-src="preview" style="width: 100%; height: 480px; border: none;" title="Component Preview"></iframe>
		</div>
		<!-- Resize handles -->
		<div data-id="resize-handle-se" class="absolute bottom-0 right-0 w-4 h-4 bg-gray-500 border border-white cursor-se-resize opacity-0 group-hover:opacity-70 hover:!opacity-100 rounded-sm transition-opacity duration-200"></div>
		<div data-id="resize-handle-s" class="absolute bottom-0 left-1/2 transform -translate-x-1/2 w-8 h-3 bg-gray-500 border border-white cursor-s-resize opacity-0 group-hover:opacity-70 hover:!opacity-100 rounded-sm transition-opacity duration-200"></div>
		<div data-id="resize-handle-e" class="absolute right-0 top-1/2 transform -translate-y-1/2 w-3 h-8 bg-gray-500 border border-white cursor-e-resize opacity-0 group-hover:opacity-70 hover:!opacity-100 rounded-sm transition-opacity duration-200"></div>
	</div>
	<script>
		/* Note that frameElement is the div that represents the <inspector-view> */
		const wrapper = frameElement.querySelector('[data-id="iframe-wrapper"]');
		const bgToggler = frameElement.querySelector('[data-id="bg-toggler"]');
		const titleArea = frameElement.querySelector('[data-id="title-area"]');
		const iframe = frameElement.querySelector('iframe');
		const container = frameElement.querySelector('[data-id="resizable-container"]');
		const resizeHandleSE = frameElement.querySelector('[data-id="resize-handle-se"]');
		const resizeHandleS = frameElement.querySelector('[data-id="resize-handle-s"]');
		const resizeHandleE = frameElement.querySelector('[data-id="resize-handle-e"]');
		
		// Coordinate transformation utilities
		function getCurrentZoom() {
			return window.hopInspectorZoom || 1.0;
		}
		
		function screenToCanvas(screenX, screenY) {
			const zoom = getCurrentZoom();
			return {
				x: screenX / zoom,
				y: screenY / zoom
			};
		}
		
		// Background toggle functionality
		bgToggler.addEventListener('click', () => {
			bgToggler.classList.toggle('bg-white');
			bgToggler.classList.toggle('bg-transparent');
			wrapper.classList.toggle('bg-white');
			wrapper.classList.toggle('bg-transparent');
			wrapper.classList.toggle('outline');
		});
		
		// Draggable functionality
		titleArea.style.cursor = 'move';
		let isDragging = false;
		let startX, startY;
		
		titleArea.addEventListener('mousedown', (e) => {
			isDragging = true;
			
			// Get current mouse position in canvas coordinates
			const currentMouseCanvas = screenToCanvas(e.clientX, e.clientY);
			
			// Get current element position (already in canvas space)
			const currentLeft = parseFloat(frameElement.style.left) || 0;
			const currentTop = parseFloat(frameElement.style.top) || 0;
			
			// Calculate offset from mouse to element origin
			startX = currentMouseCanvas.x - currentLeft;
			startY = currentMouseCanvas.y - currentTop;
			
			frameElement.style.opacity = '0.5';
			
			// Disable pointer events on all iframes to prevent drag interference
			document.querySelectorAll('iframe').forEach((frm) => {
				frm.style.pointerEvents = 'none';
			})
			
			e.preventDefault();
		});
		
		document.addEventListener('mousemove', (e) => {
			if (isDragging) {
				// Convert screen coordinates to canvas coordinates for positioning
				const canvasCoords = screenToCanvas(e.clientX, e.clientY);
				frameElement.style.left = (canvasCoords.x - startX) + 'px';
				frameElement.style.top = (canvasCoords.y - startY) + 'px';
			}
		});
		
		document.addEventListener('mouseup', () => {
			if (isDragging) {
				isDragging = false;
				frameElement.style.opacity = '1';
				
				// Re-enable pointer events on iframes
				document.querySelectorAll('iframe').forEach((frm) => {
					frm.style.pointerEvents = 'auto';
				});
				
				saveElementState();
			}
		});
		
		// Resize functionality
		let isResizing = false;
		let resizeType = '';
		let resizeStartX, resizeStartY, startWidth, startHeight;
		
		function initResize(e, type) {
			isResizing = true;
			resizeType = type;
			
			// Convert screen coordinates to canvas coordinates
			const canvasCoords = screenToCanvas(e.clientX, e.clientY);
			resizeStartX = canvasCoords.x;
			resizeStartY = canvasCoords.y;
			
			startWidth = frameElement.offsetWidth;
			startHeight = frameElement.offsetHeight;
			
			// Disable pointer events on iframe during resize
			document.querySelectorAll('iframe').forEach((frm) => {
				frm.style.pointerEvents = 'none';
			});
			
			e.preventDefault();
			e.stopPropagation();
		}
		
		resizeHandleSE.addEventListener('mousedown', (e) => initResize(e, 'se'));
		resizeHandleS.addEventListener('mousedown', (e) => initResize(e, 's'));
		resizeHandleE.addEventListener('mousedown', (e) => initResize(e, 'e'));
		
		document.addEventListener('mousemove', (e) => {
			if (isResizing) {
				// Convert current mouse position to canvas coordinates
				const canvasCoords = screenToCanvas(e.clientX, e.clientY);
				const deltaX = canvasCoords.x - resizeStartX;
				const deltaY = canvasCoords.y - resizeStartY;
				
				// Convert minimum sizes to canvas space
				const minCanvasSize = screenToCanvas(200, 150);
				
				if (resizeType.includes('e')) {
					const newWidth = Math.max(minCanvasSize.x, startWidth + deltaX);
					frameElement.style.width = newWidth + 'px';
				}
				
				if (resizeType.includes('s')) {
					const newHeight = Math.max(minCanvasSize.y, startHeight + deltaY);
					frameElement.style.height = newHeight + 'px';
					iframe.style.height = (newHeight - 60) + 'px'; // Adjust for header
				}
			}
		});
		
		document.addEventListener('mouseup', () => {
			if (isResizing) {
				isResizing = false;
				resizeType = '';
				
				// Re-enable pointer events on iframe
				document.querySelectorAll('iframe').forEach((frm) => {
					frm.style.pointerEvents = 'auto';
				});
				
				saveElementState();
			}
		});
		
		// localStorage functionality
		function getElementId() {
			const titleElement = frameElement.querySelector('[data-id="title-area"]');
			return titleElement ? titleElement.textContent.trim() : 'unknown-' + Math.random().toString(36).substr(2, 9);
		}
		
		function saveElementState() {
			const elementId = getElementId();
			const rect = frameElement.getBoundingClientRect();
			const state = {
				position: frameElement.style.position,
				left: frameElement.style.left,
				top: frameElement.style.top,
				width: frameElement.style.width,
				height: frameElement.style.height,
				iframeHeight: iframe.style.height
			};
			
			const savedStates = JSON.parse(localStorage.getItem('hop-inspector-states') || '{}');
			savedStates[elementId] = state;
			localStorage.setItem('hop-inspector-states', JSON.stringify(savedStates));
		}
		
		function restoreElementState() {
			const elementId = getElementId();
			const savedStates = JSON.parse(localStorage.getItem('hop-inspector-states') || '{}');
			const state = savedStates[elementId];
			
			if (state) {
				if (state.position) frameElement.style.position = state.position;
				if (state.left) frameElement.style.left = state.left;
				if (state.top) frameElement.style.top = state.top;
				if (state.width) frameElement.style.width = state.width;
				if (state.height) frameElement.style.height = state.height;
				if (state.iframeHeight) iframe.style.height = state.iframeHeight;
			}
		}
		
		// Initialize: restore state on load
		restoreElementState();
	</script>
	<hop-x-preview>
		<div class="p-8">
			<inspector-view {'/_preview/hop%2Ferror_pages/error-generic-error'}>
				<with-title>hop/ui - component</with-title>
			</inspector-view>
		</div>
	</hop-x-preview>
</inspector-view>

<!---------------------------------------------------------------------------->

<inspect-page {data} entrypoint>
	<!DOCTYPE html>
	<html>
	<head>
		<title>hop dev - inspector</title>
		<script src="https://cdn.jsdelivr.net/npm/@tailwindcss/browser@4"></script>
		<link href="https://fonts.googleapis.com/css2?family=JetBrains+Mono:ital,wght@0,100..800;1,100..800&display=swap" rel="stylesheet">
        <style>
          body { font-family: "JetBrains Mono"; }
        </style>
	</head>
	<body class="bg-[#f6f6f6] h-screen w-screen" style="background: repeating-conic-gradient(rgba(0,0,0,0.025) 0 25%, rgba(0,0,0,0.05) 0 50%) 50% / 16px 16px;">
		<div class="flex">
			<div class="bg-white p-3 w-80 h-screen">
				<side-bar>
					<with-layers>
						<side-bar-group>
							<with-title>
								hop/ui
							</with-title>
							<with-body>
								<div>
									side-bar
								</div>
								<div>
									heading-box
								</div>
							</with-body>
						</side-bar-group>
						<side-bar-group>
							<with-title>
								hop/ui
							</with-title>
							<with-body>
								<div>
									side-bar
								</div>
								<div>
									heading-box
								</div>
							</with-body>
						</side-bar-group>
					</with-layers>
				</side-bar>
			</div>
			<div class="flex-grow h-screen overflow-hidden">
				<canvas-view>
					<for {module in data.modules}>
						<for {component in module.components}>
							<inspector-view {component.preview_url}>
								<with-title>{module.name} - {component.name}</with-title>
							</inspector-view>
						</for>
					</for>
				</canvas-view>
			</div>
		</div>
	</body>
	</html>
</inspect-page>
