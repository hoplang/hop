Basic variable lookup should work.

## BEGIN
-- env --
{"name": "alice"}
-- expr --
name
-- out --
"alice"
## END

String literals should evaluate to themselves.

## BEGIN
-- env --
{}
-- expr --
'hello world'
-- out --
"hello world"
## END

Boolean literals should evaluate to themselves.

## BEGIN
-- env --
{}
-- expr --
true
-- out --
true
## END

## BEGIN
-- env --
{}
-- expr --
false
-- out --
false
## END

Property access should work on objects.

## BEGIN
-- env --
{"user": {"name": "alice", "age": 30}}
-- expr --
user.name
-- out --
"alice"
## END

## BEGIN
-- env --
{"user": {"name": "alice", "age": 30}}
-- expr --
user.age
-- out --
30
## END

Deep property access should work.

## BEGIN
-- env --
{"app": {"user": {"profile": {"settings": {"theme": "dark"}}}}}
-- expr --
app.user.profile.settings.theme
-- out --
"dark"
## END

Equality comparison should work with identical values.

## BEGIN
-- env --
{"user": {"name": "alice"}, "admin": {"name": "alice"}}
-- expr --
user.name == admin.name
-- out --
true
## END

Equality comparison should work with different values.

## BEGIN
-- env --
{"user": {"name": "alice"}, "admin": {"name": "bob"}}
-- expr --
user.name == admin.name
-- out --
false
## END

Equality comparison should work with literals.

## BEGIN
-- env --
{"status": "active"}
-- expr --
status == 'active'
-- out --
true
## END

## BEGIN
-- env --
{"count": 5}
-- expr --
count == 5
-- out --
true
## END

Complex equality expressions should work.

## BEGIN
-- env --
{"a": 1, "b": 2, "c": 1}
-- expr --
a == b == false
-- out --
true
## END

Negation operator should work on boolean values.

## BEGIN
-- env --
{"enabled": true}
-- expr --
!enabled
-- out --
false
## END

## BEGIN
-- env --
{"enabled": false}
-- expr --
!enabled
-- out --
true
## END

Negation of boolean literals should work.

## BEGIN
-- env --
{}
-- expr --
!true
-- out --
false
## END

## BEGIN
-- env --
{}
-- expr --
!false
-- out --
true
## END

Undefined variable should produce an error.

## BEGIN
-- env --
{}
-- expr --
undefined_var
-- error --
Undefined variable: undefined_var
## END

Property access on null should produce an error.

## BEGIN
-- env --
{"user": null}
-- expr --
user.name
-- error --
Cannot access property of null value
## END

Property access on non-object should produce an error.

## BEGIN
-- env --
{"count": 42}
-- expr --
count.value
-- error --
Cannot access property of non-object
## END

Accessing non-existent property should produce an error.

## BEGIN
-- env --
{"user": {"name": "alice"}}
-- expr --
user.age
-- error --
Property 'age' not found
## END

Negation of non-boolean should produce an error.

## BEGIN
-- env --
{"name": "alice"}
-- expr --
!name
-- error --
Negation operator can only be applied to boolean values
## END

Empty array literal should evaluate to empty array.

## BEGIN
-- env --
{}
-- expr --
[]
-- out --
[]
## END

Array literal with numbers should evaluate to array.

## BEGIN
-- env --
{}
-- expr --
[1, 2, 3]
-- out --
[1, 2, 3]
## END

Array literal with mixed types should work.

## BEGIN
-- env --
{}
-- expr --
[42, 'hello', true]
-- out --
[42, "hello", true]
## END

Array literal with variables should evaluate variables.

## BEGIN
-- env --
{"x": 10, "y": 20}
-- expr --
[x, y]
-- out --
[10, 20]
## END

Nested array literals should work.

## BEGIN
-- env --
{}
-- expr --
[[1, 2], [3, 4]]
-- out --
[[1, 2], [3, 4]]
## END

Array with property access should work.

## BEGIN
-- env --
{"user": {"name": "alice", "age": 30}}
-- expr --
[user.name, user.age]
-- out --
["alice", 30]
## END

Empty object literal should evaluate to empty object.

## BEGIN
-- env --
{}
-- expr --
object()
-- out --
{}
## END

Object literal with single property should evaluate correctly.

## BEGIN
-- env --
{}
-- expr --
object(name: 'John')
-- out --
{"name": "John"}
## END

Object literal with multiple properties should evaluate correctly.

## BEGIN
-- env --
{}
-- expr --
object(a: 'foo', b: 1, c: true)
-- out --
{"a": "foo", "b": 1, "c": true}
## END

Object literal with property access should evaluate correctly.

## BEGIN
-- env --
{"user": {"name": "alice", "disabled": false}}
-- expr --
object(user: user.name, active: !user.disabled)
-- out --
{"active": true, "user": "alice"}
## END

Nested object literals should evaluate correctly.

## BEGIN
-- env --
{}
-- expr --
object(nested: object(inner: 'value'))
-- out --
{"nested": {"inner": "value"}}
## END

Array with trailing comma should evaluate correctly.

## BEGIN
-- env --
{}
-- expr --
[
	1,
	2,
	3,
]
-- out --
[1, 2, 3]
## END

Array with trailing comma and single element should evaluate correctly.

## BEGIN
-- env --
{}
-- expr --
['hello',]
-- out --
["hello"]
## END

Object literal with trailing comma should evaluate correctly.

## BEGIN
-- env --
{}
-- expr --
object(
	a: 'foo',
	b: 1,
)
-- out --
{"a": "foo", "b": 1}
## END

Object literal with trailing comma and single property should evaluate correctly.

## BEGIN
-- env --
{}
-- expr --
object(
	name: 'John',
)
-- out --
{"name": "John"}
## END
