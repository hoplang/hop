The parser allows empty file and the resulting output is empty.

## BEGIN
-- main.hop --
-- out --
## END

When a tag is not properly closed the parser outputs an error.

## BEGIN
-- main.hop --
<main-comp>
	<div>
</main-comp>
-- out --
error: Unclosed <div>
1 | <main-comp>
2 |     <div>
  |     ^^^^^
## END

When a void tag is closed with an end tag the parser outputs an error.

## BEGIN
-- main.hop --
<main-comp>
	<hr></hr>
</main-comp>
-- out --
error: <hr> should not be closed using a closing tag
1 | <main-comp>
2 |     <hr></hr>
  |         ^^^^^
## END

When a closing tag does not have a matching opening tag, the parser outputs an
error.

## BEGIN
-- main.hop --
<main-comp>
	</div>
</main-comp>
-- out --
error: Unmatched </div>
1 | <main-comp>
2 |     </div>
  |     ^^^^^^
## END

Import tags are treated as self-closing.

## BEGIN
-- main.hop --
<import component="foo" from="bar">
<main-comp>
</main-comp>
-- out --
## END

## BEGIN
-- main.hop --
<div>
</div>
-- out --
error: Invalid component name 'div'. Component names must contain a dash and not start or end with one
1 | <div>
  | ^^^^^
## END

## BEGIN
-- main.hop --
<main-comp {Data123}>
	<div></div>
</main-comp>
-- out --
error: Invalid variable name 'Data123'. Variable names must match [a-z][a-z0-9]*
1 | <main-comp {Data123}>
  |             ^^^^^^^
## END

## BEGIN
-- main.hop --
<main-comp {data}>
	<for {item_name in data}>
		<div></div>
	</for>
</main-comp>
-- out --
error: Invalid variable name 'item_name'. Variable names must match [a-z][a-z0-9]*
1 | <main-comp {data}>
2 |     <for {item_name in data}>
  |           ^^^^^^^^^
## END

## BEGIN
-- main.hop --
<main-comp {sections}>
	<div>
		<for {section in sections}>
			<div>
				<h2>{section.title}</h2>
				<for {item in section.items}>
					<p>{item}</p>
				</for>
			</div>
		</for>
	</div>
</main-comp>
-- out --
div
	for
		div
			h2
			for
				p
## END

## BEGIN
-- main.hop --
<main-comp {foo}>
	<!DOCTYPE html>
	<html>
	<body>
	<div>hello world</div>
	</body>
	</html>
</main-comp>
-- out --
doctype
html
	body
		div
## END

## BEGIN
-- main.hop --
<main-comp entrypoint>
    <script>
        console.log("test");
    </script>
    <style>
        body { color: red; }
    </style>
</main-comp>
-- out --
script
style
## END

## BEGIN
-- main.hop --
<main-comp {data} entrypoint>
    <h1>Hello World</h1>
    <p>{data.message}</p>
</main-comp>
-- out --
h1
p
## END

## BEGIN
-- main.hop --
<main-comp>
  <if {user.name == other_user.name}>
    <div>Same name</div>
  </if>
  <if {(data.x == data.y)}>
    <div>Parentheses work</div>
  </if>
  <if {a == b == c}>
    <div>Chained equality</div>
  </if>
</main-comp>
-- out --
if
	div
if
	div
if
	div
## END

## BEGIN
-- main.hop --
<main-comp>
  <if {x == y}>
    <div>Equal</div>
  </if>
</main-comp>
-- out --
if
	div
## END

## BEGIN
-- main.hop --
<main-comp {i}>
	<for {j in i}>
		<for {k in j.s.t}>
			<if {k}>
			</if>
		</for>
	</for>
	<for {p in i}>
		<for {k in p.s.t}>
			<for {item in k}>
			</for>
		</for>
	</for>
</main-comp>
-- out --
for
	for
		if
for
	for
		for
## END

## BEGIN
-- main.hop --
<main-comp {data}>
	<if {data}>
		<for {d in data}>
		</for>
	</if>
</main-comp>
-- out --
if
	for
## END

## BEGIN
-- main.hop --
<main-comp {foo}>
	<for {bar in foo}>
	  <div></div>
	</for>
</main-comp>
-- out --
for
	div
## END

## BEGIN
-- main.hop --
<main-comp {p}>
	<foo-comp></foo-comp>
	<foo-comp></foo-comp>
</main-comp>
-- out --
render
render
## END

## BEGIN
-- main.hop --
<main-comp {data}>
	<foo-comp {data}></foo-comp>
	<bar-comp {data.user}></bar-comp>
</main-comp>
-- out --
render
render
## END

## BEGIN
-- main.hop --
<main-comp {foo}>
	<for {v in foo}>
		<div>{v}</div>
	</for>
</main-comp>
-- out --
for
	div
## END

## BEGIN
-- main.hop --
<main-comp {foo}>
	<script>
		const x = "<div></div>";
	</script>
</main-comp>
-- out --
script
## END

## BEGIN
-- main.hop --
<main-comp {user}>
  <a set-href="user.url" set-class="user.theme">Link</a>
</main-comp>
-- out --
a
## END

## BEGIN
-- main.hop --
<main-comp>
    <slot-content>
        Default content
    </slot-content>
    <other-comp>
        <with-data>
            Custom content
        </with-data>
    </other-comp>
</main-comp>

<other-comp>
    <slot-data>
        Other content
    </slot-data>
</other-comp>
-- out --
slot-content
render
	with-data
## END

## BEGIN
-- main.hop --
<main-comp>
    <slot-default>
        Default content
    </slot-default>
    <button-comp>
        <with-default>Custom Button</with-default>
    </button-comp>
</main-comp>
-- out --
slot-default
render
	with-default
## END

## BEGIN
-- main.hop --
<main-comp>
	<div class="navbar">
		<svg xmlns="http://www.w3.org/2000/svg" width="128" height="128" version="1.1" viewBox="0 0 128 128" class="size-12">
			<g style="fill: none; stroke: currentcolor; stroke-width: 5px; stroke-linecap: round; stroke-linejoin: round;">
				<path d="M20.04 38 64 22l43.96 16L64 54Z"></path>
				<path d="M17.54 47.09v48l35.099 12.775"></path>
				<path d="M64 112V64l46.46-16.91v48L77.988 106.91"></path>
			</g>
		</svg>
		<ul>
			<li><a href="/">Home</a></li>
		</ul>
	</div>
</main-comp>
-- out --
div
	svg
		g
			path
			path
			path
	ul
		li
			a
## END

## BEGIN
-- main.hop --
<main-comp>
	<form id="form">
		<input type="text" required>
		<button type="submit">Send</button>
	</form>
</main-comp>
-- out --
form
	input
	button
## END

Test basic <if> tag with simple variable expression.

## BEGIN
-- main.hop --
<main-comp>
	<if {isVisible}>
		<div>This is visible</div>
	</if>
</main-comp>
-- out --
if
	div
## END

Test <if> tag with complex expression.

## BEGIN
-- main.hop --
<main-comp>
	<if {user.name == 'admin'}>
		<div>Admin panel</div>
		<button>Settings</button>
	</if>
</main-comp>
-- out --
if
	div
	button
## END

Test <if> tag without expression should produce error.

## BEGIN
-- main.hop --
<main-comp>
	<if>
		<div>Content</div>
	</if>
</main-comp>
-- out --
error: Missing expression in <if> tag
1 | <main-comp>
2 |     <if>
  |     ^^^^
## END

Test basic <for> tag with simple loop generator expression.

## BEGIN
-- main.hop --
<main-comp>
	<for {item in items}>
		<div>Item content</div>
	</for>
</main-comp>
-- out --
for
	div
## END

Test <for> tag with complex array expression.

## BEGIN
-- main.hop --
<main-comp>
	<for {user in users.active}>
		<div>User: {user.name}</div>
		<p>Role: {user.role}</p>
	</for>
</main-comp>
-- out --
for
	div
	p
## END

Test <for> tag without expression should produce error.

## BEGIN
-- main.hop --
<main-comp>
	<for>
		<div>Content</div>
	</for>
</main-comp>
-- out --
error: Missing loop generator expression in <for> tag
1 | <main-comp>
2 |     <for>
  |     ^^^^^
## END

Test <for> tag with non-loop-generator expression should produce error.

## BEGIN
-- main.hop --
<main-comp>
	<for {foo}>
		<div>Content</div>
	</for>
</main-comp>
-- out --
error: Expected 'in' keyword in <for> tag
1 | <main-comp>
2 |     <for {foo}>
  |              ^
## END
